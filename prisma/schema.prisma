generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  password        String
  role            Role             @default(USER)

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  favoriteRecipes FavoriteRecipe[]  // Relation to favorite recipes
}

model Recipie {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  ingredients   String[]
  instructions  String[]
  image         String?
  categories    RecipieCategory[]   // Relation with join model
  favoriteRecipes FavoriteRecipe[]    // Relation to favorite recipes
}

model Category {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String?
  recipies RecipieCategory[] // Relation with join model
}

model RecipieCategory {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  recipieId  String @db.ObjectId
  categoryId String @db.ObjectId

  recipie  Recipie  @relation(fields: [recipieId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

model FavoriteRecipe {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId // Ensure this matches the native type of User.id
  recipeId    String   @db.ObjectId // Reference to the Recipe model
  createdAt   DateTime @default(now())

  // Unique constraint to avoid duplicates
  @@unique([userId, recipeId])

  user     User     @relation(fields: [userId], references: [id])
  recipe   Recipie  @relation(fields: [recipeId], references: [id])
}
